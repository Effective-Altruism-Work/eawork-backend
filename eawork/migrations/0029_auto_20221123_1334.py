# Generated by Django 3.2.15 on 2022-11-23 13:34

from django.db import migrations


def huh(subarr):
    if len(subarr) < 1:
        return False

    return True


def mapping(apps, schema_editor):
    Alert = apps.get_model("eawork", "JobAlert")

    for alert in Alert.objects.all():
        # if no query, move on
        if alert.query_json is None:
            alert.save()
            continue

        # areas
        for i, sub_arr in enumerate(alert.query_json["facetFilters"]):

            if len(sub_arr) == 0 or "tags_area" not in sub_arr[0]:
                continue  # skip non org tags

            newS = list(
                map(
                    lambda x: x
                    if "Global health" not in x
                    else "tags_area:Global health & development",
                    sub_arr,
                )
            )

            newS = list(
                map(
                    lambda x: x if "Other (pressing)" not in x else "tags_area:Climate change",
                    newS,
                )
            )

            alert.query_json["facetFilters"][i] = newS

        # role types
        for i, sub_arr in enumerate(alert.query_json["facetFilters"]):

            if len(sub_arr) == 0 or "tags_role_type" not in sub_arr[0]:
                continue  # skip non org tags

            # assistant
            withoutAssistant = list(
                filter(
                    lambda x: False if "Assistant" in x else True,
                    sub_arr,
                )
            )

            # management

            withoutOthers = list(
                filter(
                    lambda x: False if ("Leadership" in x or "Manager" in x) else True,
                    withoutAssistant,
                )
            )

            withManagement = withoutOthers
            if len(withoutOthers) != len(withoutAssistant):
                # there was at least one management-y role and we need to add it back in!
                withManagement.append(
                    "tags_role_type:Management",
                )

            alert.query_json["facetFilters"][i] = withManagement

        # remove empties
        alert.query_json["facetFilters"] = list(filter(huh, alert.query_json["facetFilters"]))

        alert.save()


def reverse(apps, schema_editor):
    print("reversed")


class Migration(migrations.Migration):

    dependencies = [
        ("eawork", "0028_remove_query_strings"),
    ]

    operations = [
        migrations.RunPython(mapping, reverse_code=reverse),
    ]
